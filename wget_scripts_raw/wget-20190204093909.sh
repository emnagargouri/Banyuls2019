#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esg-dn1.nsc.liu.se - 2019/02/04 09:39:09
# Search URL: https://esg-dn1.nsc.liu.se/esg-search/wget/?distrib=false&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.mon.tas.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.mon.pr.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.mon.tas.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.mon.pr.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MOHC-HadGEM2-ES.rcp85.r1i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MOHC-HadGEM2-ES.rcp85.r1i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MOHC-HadGEM2-ES.historical.r1i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MOHC-HadGEM2-ES.historical.r1i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.ICHEC-EC-EARTH.rcp85.r12i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.ICHEC-EC-EARTH.rcp85.r12i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.ICHEC-EC-EARTH.historical.r12i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.ICHEC-EC-EARTH.historical.r12i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esg-dn1.nsc.liu.se/esg-search/wget/?distrib=false&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.mon.tas.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.rcp85.r1i1p1.RCA4.v1a.mon.pr.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.mon.tas.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MPI-M-MPI-ESM-LR.historical.r1i1p1.RCA4.v1a.mon.pr.v20160803|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MOHC-HadGEM2-ES.rcp85.r1i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MOHC-HadGEM2-ES.rcp85.r1i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MOHC-HadGEM2-ES.historical.r1i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.MOHC-HadGEM2-ES.historical.r1i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.ICHEC-EC-EARTH.rcp85.r12i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.ICHEC-EC-EARTH.rcp85.r12i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.ICHEC-EC-EARTH.historical.r12i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.ICHEC-EC-EARTH.historical.r12i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.CNRM-CERFACS-CNRM-CM5.rcp85.r1i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.RCA4.v1.mon.tas.v20131026|esg-dn1.nsc.liu.se&dataset_id=cordex.output.EUR-11.SMHI.CNRM-CERFACS-CNRM-CM5.historical.r1i1p1.RCA4.v1.mon.pr.v20131026|esg-dn1.nsc.liu.se'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'SHA256' '6a9d23d0456bb4332734e65d627e0e488357e2469b492e673594afae31b3fbce'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'SHA256' 'cfe9812e8e413b1b4ee0e983cb0999d2a6e8a0d05bb8e91264d25cc48f0bcbe5'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'SHA256' 'ef16594dc762178d4c43a415bd8ecfff527aef5c6143f1f63f2520f63c7f1823'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'SHA256' '2c29073ef3842875655beca0be87287f33ae431b939f88a49938f796d7d80d21'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'SHA256' '0a5043310b5e0245b58e15969c512629a3da589d717bc6664ba9aec9a07a7085'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'SHA256' 'de97a9c45784ccdd71084b67a9429c31730e7e80bcbec117add4c158c45e48f0'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'SHA256' 'af6173cb0551f1373f2f5c760f09dd42bb5275456dcd9dbef9aaec22c474be23'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'SHA256' 'd3894e0d07d89042309667ff2f8400a4a82971300f43e73c109d6c80f4e82ea6'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'SHA256' 'dc18593d6e0a200870378a4949e092981138d7d79c62aff404b2038cf11cfd98'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/historical/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'SHA256' 'b9a094c3f006477367856e10512c0b20a8f7e35ec4eb85d2ec975ffa3d0bf1b4'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' 'eae8d5f1d9d8d1664eabce446d8f201aa91da4c5af1e139b76728d69a375ce4a'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '8cbedc88ef320f652e510c366a4ef69159c93c0efa3e3884f3c4b2637dfc69d3'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '99bd7c6a131304b8adda187c793a22cf96ad2ecf0c2560d16cf7a896f03ecd3f'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '8972d4bc8bb449371477e513987039dfa720fd8e77b9bd260bbe4584dccf2ae9'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '2fdb0bab445c18026e957cb6aaf5f9face3533fa605f7be63bae37c4a5361f9c'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' '80c05a423e9e55517f87f4773e263ecb1d91988e77ac332f03b0fb65c1ac1976'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' '00fc9764a8cc96153f1796c22d885865568f180f6e98eaff27177c817ae5899d'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' 'cc175f3450cad49fba3f18c59d472b7451bfcd4ea525d94a06e1a31da19d0dab'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' 'b0d6989435eedf50c549e1b785cbd99526b9ada6ac2f1737cd49358339890ddb'
'pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '69e1b0e1c49ce567c83e729ba17781533fa0e7439e7f8e1527d74b2bb68cb4fd'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '2e82a274e98423b38b2b5536e6ceb8972b7212b2d51877d123beaec93a38d03e'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' 'fa59feb26090467aab0719cfefead501214feeca18164b65f32488b905e28d5b'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '88da32753eb945176d9dfe695e7a5f132a2aa87e7ec6fd07e3a16e2e2609ee71'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '992d2aea46fdefcf0243161c47be5798a96173d360631f08beaaabbe1ce6ee0b'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '21499c0320d2868965c3a9fca87f2323e406a49366acf17dfee080ee525d445f'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' '1aa1c5fb1875e19feb758325dad8df5dbff2069c64fba986aa4b046a67ece32c'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' 'f4310333e14c475a48db55fbabb60ba042d616cf799f5dd12d386ac98ece96c8'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' '57d702d2f277369d6b785ffdf9ac5254dd08a0589ce7acee210634715172c1c2'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '166b629726362549f76d899a9d3b7365d53c410fd8a04899abf263c6a54e4c35'
'tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/CNRM-CERFACS-CNRM-CM5/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_CNRM-CERFACS-CNRM-CM5_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '65ca8a68e2e34dc8be203beb0e767ad9c95a2944fc269eb3bf2908992620aa5e'
'pr_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/historical/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'SHA256' '738cca97eff4504503432f500452ab754ed13612244d27de27f9f88b9a5a483e'
'pr_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/historical/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'SHA256' 'f83a1d7c327a5734dcbb7f0d401e039f82ce61a7c03f6a0d8eb399b25179e3ce'
'pr_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/historical/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'SHA256' '28200c4712de76eb6cccc06ff1f29ce728dbe373450b02688838ae5cc930925b'
'pr_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/historical/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'SHA256' 'a496ae222eff803a0ce7e288a0bad73881555377e8e06c36e0167dc588b254d9'
'pr_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/historical/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'SHA256' '9637c48e1c2f5c87740a87ad452784f50a4cf81ad984f54cfc7971fb77c31e22'
'tas_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/historical/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'SHA256' '2504255adbace895c7c0a0185eb6975b14029fead871182f90fbd59ca7c87f63'
'tas_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/historical/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'SHA256' '7d25b87fc484b4a6f2db8f48d749d980e6493b7efc04691139f83d8004fb2311'
'tas_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/historical/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'SHA256' '19e6b1871cb1910d892fc4dd3472c11ecef9b8298da0f77e394d49362eb302d3'
'tas_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/historical/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'SHA256' '366fcfcdb73fdbc0f9bda96c0db01f9261339745f21f755e4699b87ec604b2c6'
'tas_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/historical/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_historical_r12i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'SHA256' 'abc849b29475d9730db4e3aaf1968f06b0ef1190fd9db74ac944eddbdb771230'
'pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '84246fd6c0ff6d85109c2703e4556b79949fba5e444fe04cd79f62560fa7272c'
'pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '4be6a136edaa1eb6068a8de6bf910fdf07b91de27d34a0fd0293766fbfe3ba86'
'pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '5fa4d64b01b6e41658cf6ce2cf28270529525f490b6277559bf51cf1717d30f6'
'pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '2e2c2b0e61d6ddcc14fa0d82017a60687d90967ab4363adf3c69c3b6a5ca8e81'
'pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' 'cf948c4536338f94b9e89917f84b2c533b62d027808dc5e15f5b1ddf281965f8'
'pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' 'c1b24e7169775c3ada58be5efee0bfb84f5ed1673556b2926510176326af572f'
'pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' '8cd224bf762b743f7860a5563e28c15264de88f35337325f52692fbaf0d07523'
'pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' '868757ce9b13862ea3b55d6cc7960c84bd5dad77830acc58565eda6bc6cf9daf'
'pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '768f91d4a96f1c65c896f3ffc51d1c5655831a4bf8e68d67fa934d94940adb2d'
'pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' 'a57d8a90da70ad81ec5a884b3ac1b248bb0f34a9820b43bfdc63a26a07f27482'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '7dba16c500d1264a535adc8d7701f0c657bef785621354fc4dd1dbad7db13c3b'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' 'c07851bee3a08b291246655994b3a1b2c4a0c8bc92788c1ac2d10be057d73282'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '26320b3b160463d214006042e0b4ccc69d5bae3d1278ac0724cc1906e19dfd1b'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '3f0e7981992bfd513124654bc3a35cd35a5da22d2e479064f0d643c6e6a86843'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '3527c5ff88de937066054b2e66b0413e97e20a8e203174ad6d82c606a574a805'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' '9d629763e09698a99a96a91beaa6c95ed6f4b01cdbc783fa5d4dca26f6792167'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' '809802dcb41430145dcfd7a48a723ecf5dc41f92dbbad6728bb411bd277bcd19'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' 'b88adcc7ea6610ac7780bc504c2d5202ab651ca22bb102f51a46c3fb1067fa69'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' '2760d47a26b1b2f865d133644f66fe519ae964c5df5ecd933f594ddab86154fb'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/ICHEC-EC-EARTH/rcp85/r12i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_SMHI-RCA4_v1_mon_209101-210012.nc' 'SHA256' '79820ee2976e7027eae513915c81700bde1806e579c3375018b99684bbb70fc8'
'pr_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/historical/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'SHA256' '740d50c6e24fba061ca436c128288e4703a5935a23df742657927efc37e011b5'
'pr_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/historical/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'SHA256' 'eb13806220a95e3c7daf1b221bbc20e667ccb715a0dbea849e4652c23f89caf3'
'pr_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/historical/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'SHA256' 'f827a18120b27544e2a77b86e4e9bc2ab13e009f1af1d0a3ff5c55f00459dd5b'
'pr_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/historical/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'SHA256' '86dc4c6ad89aadfb7df878cda047f7f8b426ee1ee83c9b62fc4d516adf9cbc70'
'pr_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/historical/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'SHA256' 'acf60fd37010582bcae27c8d8bad69f51ad234c47f29173fa30a5bb826e09820'
'tas_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/historical/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_197001-197012.nc' 'SHA256' '44ab29b250daec936e7ee9131862d0ee0e04375dc0d3791118a8339fb1143ef2'
'tas_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/historical/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_197101-198012.nc' 'SHA256' 'aa1aa40ae5ea5640fbaf84c429aa39863c28202065272e5a0964abe79c276459'
'tas_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/historical/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_198101-199012.nc' 'SHA256' '7aa3a3ea469ace68c3e07caa7a0b823b288627a5a5d80eabb3856e9165785e4a'
'tas_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/historical/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_199101-200012.nc' 'SHA256' '5e292210e03a3cc472aa1772ebe3dd589f410b218ad938fc6c1d8e7f9e2d7c09'
'tas_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/historical/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_historical_r1i1p1_SMHI-RCA4_v1_mon_200101-200512.nc' 'SHA256' '9b40b809292b2130ee13778a833aeb86c6aedd559d5d00ed0b927279728e4904'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '104f30edbb96e7df4ebdb746cb285cb2b349fa7fba9998bfc33e3f92d8f48890'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' 'df2163db868f58c02628debeddfdeffcb0b893151eb01ca42c0952adf2398a08'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '48623a8f3339c6c3219166aac3709bbe16fa8f7ade5a3a22cdbc8ffe1a1bcc90'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '2cfa5c9219b15472a3e1273750acfaf3d634b20d75931bc691ac4708b96acde7'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '6972ea879ea31f9a9ba18fd058a8e679d83e2a034a7eb6f1bf6044cf6b937d0d'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' '9cf3673e211df78a57c39ae1737f32322dacc65b830d98d406e961c6c9f38e92'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' '1ec10c797c6d2b968c45b36ce626e2089ac78707a992a8387e47718b0c1122b1'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' '05e411fa1d10968fb3addeea86dab46d6599335d6bf2135d88021eb05f214ff5'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' 'a1012946e7a6013778a0007a1d8e7281548c3f98d802d1cb8cf2878085f99ede'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-209912.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/pr/v20131026/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-209912.nc' 'SHA256' 'c64943ff3f65ae092e700d3436f79edfcd3810ba340ff71102037e5cfee62c2f'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_200601-201012.nc' 'SHA256' '3ccc1985cf30d89de1b523dde489cbbf8d172ea73f2be51a4765330448fde0a4'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_201101-202012.nc' 'SHA256' '3606119869caf80d21e822e003ef8a3697c7f321f8b807ebaedb58ae2d651e31'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_202101-203012.nc' 'SHA256' '0bd6c5d987a2516445deddca55c5f9a8225427bff511832b999632d01fccd3b6'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_203101-204012.nc' 'SHA256' '1c926ad2d295b2307ba398b23014138ca44134d4d865d54e46bd25bd01208083'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_204101-205012.nc' 'SHA256' '64a393dd5830a1e90a84839e320491a4ccd226644a1a41d69c6974168ccd2acd'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_205101-206012.nc' 'SHA256' 'fbe147f0bfb00a0f291db0ed2990dc99cddcf0741bc4aaef8c1617a92cef9400'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_206101-207012.nc' 'SHA256' '6b56090abfe826114ee368777629a9ce28e0b4093a89904e6c324f726484a733'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_207101-208012.nc' 'SHA256' 'e243d0053e22bb148d9893b327b52c997fec0b1dfb8ca93aafc9030f9913836d'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_208101-209012.nc' 'SHA256' 'f9505b8e9ca30f496cc0e1998d217360ff4bd71ff753e5f148a6549d8c67f62a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-209912.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp85/r1i1p1/SMHI-RCA4/v1/mon/tas/v20131026/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_SMHI-RCA4_v1_mon_209101-209912.nc' 'SHA256' '7030eead4791ab07479dd9805d76e6131253144699c8f4b787a3a31a4463e05a'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_197001-197012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_197001-197012.nc' 'SHA256' 'd76bab7526fd263dd10c3c8835efe46ee0e180dcf94a6b2712b4fda8728dd651'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_197101-198012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_197101-198012.nc' 'SHA256' 'e5ed3ec272a7e56a15de79923c2110fdb0d83e2126d5d86c3f26d454c248d0cf'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_198101-199012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_198101-199012.nc' 'SHA256' 'aecf79891bc3e1ca79c4de6c826e53663f8afc2596c62806e4566b411bad9091'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_199101-200012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_199101-200012.nc' 'SHA256' '457e247b01ba3a38c5ce5ff3943364ea35ef7a63443d419217825f826e702dc2'
'pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_200101-200512.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_200101-200512.nc' 'SHA256' '07b11462e1ea13ecb50e97a68a3fbda1c2b2dbcf68f4e014f8e7deca8831d222'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_197001-197012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_197001-197012.nc' 'SHA256' 'b4b0e1f89f949608d85b8fa33052e1010ce78a0c09f269491b38b7925ac32ead'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_197101-198012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_197101-198012.nc' 'SHA256' '313edaca3463d943360b8495f56c159629730fc92f7abb090b1dfe6f8529f849'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_198101-199012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_198101-199012.nc' 'SHA256' 'e5c0110493443de11612617b245c2974a5575f588920760290f9c5cf6c81f8cf'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_199101-200012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_199101-200012.nc' 'SHA256' '765cb547383be3d1c62f9570bc3fac485c570222f0dcdc559208686fbb4b0d39'
'tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_200101-200512.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/historical/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_historical_r1i1p1_SMHI-RCA4_v1a_mon_200101-200512.nc' 'SHA256' '98d51799d6e8b3ba363abe52474d80effd1c5552c38f24da5d5dc20dd0a53e9e'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_200601-201012.nc' 'SHA256' 'c4a04765d57ce5d3fdc091752c6038bf116aac2e738bb4eee39c3c241980b486'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_201101-202012.nc' 'SHA256' 'bb84dff32e374dc96b6c8e025850076486d1fdbc2218caa9dfc692fcf848e564'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_202101-203012.nc' 'SHA256' '45d6424d9f56b697125870b32563c76029d8e5e066d20e68ec39f5d3b11d2477'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_203101-204012.nc' 'SHA256' 'b6d91a9f5dc5b3414e40d10c3d5a0e1a676079f6898f84f710628c73ddb214d4'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_204101-205012.nc' 'SHA256' '2ab1f8aef17f24b401e579270bf48361eec0eafaff02313c7e815f6eaf531d42'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_205101-206012.nc' 'SHA256' '3c1fffe21cc37d7642d0191b0cd448e68bc68c912ce011efe20d20deff090467'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_206101-207012.nc' 'SHA256' '8680c107d414fcbc47721812abd93076493389315f0f6a8b524dd296533ecda7'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_207101-208012.nc' 'SHA256' 'ee0e5e8e5d599e56a96177459fbcd98d512b5910bc320669299a9cd8f1b80327'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_208101-209012.nc' 'SHA256' 'fda77cf00afdd92cbf1f03abb90f817aed9effd700cd28204da2e8b968202e6a'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/pr/v20160803/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_209101-210012.nc' 'SHA256' '9615a52baf2d634fa1449754c354dc2fecfd8a8e3b6d1b2368845b38bfef5076'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_200601-201012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_200601-201012.nc' 'SHA256' 'c4394777e4e957d1eba5d2ef960f83afc2ddcdc00d14b65155fdaa6489882688'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_201101-202012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_201101-202012.nc' 'SHA256' '3cc10e8ef82fbfb00a8edb98c68bd910ede9b9aaf5fef0a6a78102f5f142ae64'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_202101-203012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_202101-203012.nc' 'SHA256' '5a8b77ee49344456ba0b42964fe664d59eaf924f4d283e8085ed5ee008aa2600'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_203101-204012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_203101-204012.nc' 'SHA256' '664568d0c4228a3a9011ac269d633e9eb9b64088f1c1e92ea5c1bfe6207bbe45'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_204101-205012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_204101-205012.nc' 'SHA256' '56237277a1686cea14b48b1137f3768b81ecb4c21172685958a1a0f4ce3c76b6'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_205101-206012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_205101-206012.nc' 'SHA256' '2cb767d0fb94cfa6b7ba8cbf813ca405a1a22460af4973e54a6931768c42a20e'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_206101-207012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_206101-207012.nc' 'SHA256' '51fe60a6025c87e70c51fd9f50ba00d9b3c37c2dbc358f59742d391bd8fa883e'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_207101-208012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_207101-208012.nc' 'SHA256' 'c52c8883aec07d3b547d2f4b589a0abe8a1be8e8e8e66a51cd72deb793bb47d5'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_208101-209012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_208101-209012.nc' 'SHA256' '7aa5ed80f325a847c7f774cfa3818e5f4ac78c38b0f38bfc7dcbe14f7c45c885'
'tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_209101-210012.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot1/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/mon/tas/v20160803/tas_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_mon_209101-210012.nc' 'SHA256' '4368575251065e74a7376e192eca288ca9d07d5b86c331d81d75781804b5a90e'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if ((mVer<5)); then
        echo "Java version 1.5+ is required for retrieving the certificate." >&2
        echo "Current version seems older: $(java -version | head -n1) " >&2  
        return 1
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 120 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
